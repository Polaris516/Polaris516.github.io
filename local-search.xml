<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/Linux/"/>
    <url>/Linux/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidApp</title>
    <link href="/AndroidApp/"/>
    <url>/AndroidApp/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-应用开发模式"><a href="#Android-应用开发模式" class="headerlink" title="Android 应用开发模式"></a>Android 应用开发模式</h1><div class="note note-primary">            <p>本内容结合博主自己开发Android App的经历，在这中间遇到很多的波折，将这些整理下来并且给予初学者一个帮助，本文将通过最简单的方式带你入门，并且独自开发一个app。</p>          </div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料：《Android Sudio开发实践——从零基础到App上线》欧阳燊<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考内容：……<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>软件开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>System Operation</title>
    <link href="/System/"/>
    <url>/System/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><div class="note note-primary">            <p>本文主要针对408考研内容编写，以及Linux等操作。</p>          </div><h2 id="1-1-操作系统简介"><a href="#1-1-操作系统简介" class="headerlink" title="1.1 操作系统简介"></a>1.1 操作系统简介</h2><p><code>操作系统能做什么？</code></p><div class="note note-warning">            <ul><li>从用户的角度：<ol><li>提供良好的用户界面</li><li>标准的函数库</li><li>使得编程更加方便并且不容易出错</li></ol></li><li>从系统的角度：<ol><li>管理资源（硬件资源、处理机、存储器、设备；信息资源【文件】）</li><li>解决申请资源时产生的冲突</li><li>阻止错误的产生和计算机不正当的使用</li></ol></li></ul>          </div><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><font color="red">操作系统（Operation System，OS）</font>：是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本你爹系统软件。</p><blockquote><ul><li><p>An operating system acts an intermediary between user of a computer and the computer</p><p>  hardware.</p><ul><li>操作系统充当计算机⽤⼾和计算机硬件之间的中介</li></ul></li><li><p>The purpose of an operating system is to provide an environment in which a user can execute</p><p>  programs in a convenient and efficient manner.</p><ul><li>操作系统的⽬的是提供⼀个⽤⼾可以⽅便和有效地执⾏程序的环境</li></ul></li><li><p>An operating system is software that manages the computer hardware.</p><ul><li>操作系统是管理计算机硬件的软件</li></ul></li></ul></blockquote><p><img src="/img/System/System_1.1.png" alt="现代计算机硬件结构"></p><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><div class="note note-success">            <p>这里的内容以及和下面的<strong>存储器</strong>，<strong>I&#x2F;O设备</strong>，<strong>总线</strong>等都是计算机组成原理中的重要内容，在本文中也是按照书中给的内容进行叙述。下面有链接可以查看具体的讲解。（部分内容已经脱离408考点，主要是知识扩展）</p>          </div><blockquote><p>处理器（中央处理器（Central Processing Unit）—— CPU）：</p><ul><li><p>CPU工作的基本周期是：提取指令，译码分析，执行指令。（接化发！<code>链接中有讲到</code>）</p></li><li><p>CPU内部包含若干寄存器</p><ul><li><p>通用寄存器：</p><p>  ​用来存放关键变量和中间结果。</p></li><li><p>专用寄存器：</p><ul><li><p>程序计数器（PC）：</p><p>  ​PC中保存下面要提取指令的内存地址。</p></li><li><p>栈指针寄存器：</p><p>  ​存放指向当前内存栈的顶端的指针；该栈中保存有关函数（过程）调用时的现场信息，包括输入参数、局部变量和未在寄存器中保存的临时变量。</p><p>  ​程序执行过程中调用的每个函数在栈中站有一个帧面。</p></li><li><p>程序状态字（PSW）：</p><p>  ​条件码位、CPU优先级、程序执行模式（<strong>用户态</strong>或者<strong>核心态</strong>）和各种其他控制位。</p><p>  ​在系统调用和I&#x2F;O中PSW起重要作用。</p></li></ul></li></ul></li><li><p>处理机执行状态——保护操作系统程序，防止收到用户程序的损害：</p><ul><li><p>用户态</p><p>  ​用户程序（各种应用程序、工具、例程等）在用户态下执行，它们权限较低，只能执行指令集中非特权指令。</p></li><li><p>核心态（系统态、管理态）</p><p>  ​处于核心态，有较高特权，可以执行所有指令，包括普通用户程序中不能使用的<strong>特权指令</strong>，从而能对<strong>所有寄存器</strong>和<strong>内存</strong>进行访问，以及<strong>启动I&#x2F;O操作</strong>等。</p></li></ul></li></ul><p></p></blockquote><p><a href="https://polaris516.github.io/CPU">中央处理器——CPU</a></p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><blockquote><p>存储器（memory）：按照速度、容量和成本划分，存储器系统构成一个层次结构。（如图1.2）</p><ul><li><p>顶层是CPU的内部寄存器，速度和CPU一样快，存取它们没有延迟。但成本高，容量小，通常小于1KB</p></li><li><p>高速缓存：</p><p>  ​当程序需要读取具体信息时，Cache硬件先查看它是否在Cache中，如果在其中（“命中”），就直接使用它；反之，就从内存中获取该信息，并把它放入Cache中。小于4MB</p></li><li><p>内存（主存）：</p><ul><li>存储器系统的主力，也称作RAM（随机存取存储器）</li><li>CPU可以直接存取内存及寄存器和Cache中的信息。</li><li>机器执行的指令及所用的数据必须先存放在内存及Cache和寄存器中。</li><li>内存中存放的信息是易失的，当机器电源被关闭后，内存中的信息就全部丢失了。</li></ul></li><li><p>磁盘（硬盘、辅助存储器或者辅存、外存）：</p><ul><li>对内存的扩展</li><li>磁盘上可以永久保留数据，容量特别大</li><li>磁盘上数据的存取速度低于内存存取速度</li></ul></li><li><p>磁带</p><ul><li>数据永久保存，容量很大，存取速度很慢，不适宜随机存取。</li><li>主要作为文件系统的后备，存放不常用的信息或用做系统间的传送信息的介质。</li></ul></li><li><p>其他存储器：如软盘，光盘（CD-ROM）、U盘等</p></li></ul></blockquote><p><img src="/img/System/1.2.1.png" alt="图1.2"></p><p><a href="https://polaris516.github.io/Memory">存储器——Memory</a></p><h3 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h3><blockquote><ul><li><p>控制器：</p><p>  ​控制器是I&#x2F;O设备的电子部分，它协调和控制一台或多台I&#x2F;O设备的操作，实现设备操作与整个系统操作的同步。</p></li><li><p>设备:</p><p>  ​本身的对外接口相当简单，实际上他们隐藏在控制器后面</p></li></ul><p>设备驱动程序：向控制器发布命令并接收其回答信息的软件。</p></blockquote><ul><li>存储器只是众多IO设备的一种，IO设备是计算机体系结构中种类最丰富的设备类型，而且它有着很强的扩展性</li><li>管理IO设备是操作系统非常重要的组成成分，操作系统中有一个专门的IO子系统负责完成这项工作。</li></ul><p><a href="https://polaris516.github.io/I-O">I&#x2F;O设备</a></p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><blockquote><ul><li><p>数据总线：</p><p>  ​计算机各部件之间传送数据的通道，其宽度随字长而定</p><p>  ​数据总线是双向总线，即两个方向都能传送数据</p></li><li><p>地址总线：</p><p>  ​从CPU送来地址的地址线，它可以是存储器的地址，也可以是IO设备控制器中中控制寄存器或数据寄存器的地址</p></li><li><p>控制总线：</p><p>  ​在该线上出现的信号是各个模块之间传送数据时所需的全部控制信号</p></li></ul></blockquote><h2 id="1-2-处理器系统"><a href="#1-2-处理器系统" class="headerlink" title="1.2 处理器系统"></a>1.2 处理器系统</h2><h3 id="单处理器系统"><a href="#单处理器系统" class="headerlink" title="单处理器系统"></a>单处理器系统</h3><ul><li>Single-progress System</li><li>只有一颗注CPU，执行通用指令集</li><li>带有其他专用处理器，为特定设备服务，如：磁盘、键盘、图形控制器等<ul><li>它们能够执行的指令有限，不处理用户进程</li><li>操作系统会向它们发出任务，并监控它们的状态</li></ul></li></ul><h3 id="多处理器系统"><a href="#多处理器系统" class="headerlink" title="多处理器系统"></a>多处理器系统</h3><ul><li>Multi processor&#x2F;Muliticore System</li><li>有两个或多个紧密通信的CPU，它们共享计算机总线、时钟、内存和外设等。</li></ul><h3 id="集群系统"><a href="#集群系统" class="headerlink" title="集群系统"></a>集群系统</h3><ul><li>Clustered System</li><li>该系统由若干节点（Node）通过网络连接在一起，每个节点可为单处理器系统或多处理器系统，节点之间是松耦合（loosely coupled)关系<ul><li>高可用性（high availability）</li><li>高性能计算（high-performance computing）</li></ul></li></ul><h2 id="1-3-单道单用户模式"><a href="#1-3-单道单用户模式" class="headerlink" title="1.3 单道单用户模式"></a>1.3 单道单用户模式</h2><p><img src="/img/System/1.3.png" alt="单道单用户模式"></p><h2 id="1-4-多道程序设计"><a href="#1-4-多道程序设计" class="headerlink" title="1.4 多道程序设计"></a>1.4 多道程序设计</h2><ul><li>操作系统最重要的一点是具有多道程序的能力</li><li>单道程序不能让CPU和IO设备始终忙碌，多道程序设计通过安排任务使用的CPU总有一个执行任务，从而提高CPU利用率</li><li>实现的硬件保证：处理器和IO设备具有并行工作的能力</li></ul><h2 id="1-5-分时系统"><a href="#1-5-分时系统" class="headerlink" title="1.5 分时系统"></a>1.5 分时系统</h2><ul><li>分时系统也称多任务系统，是多道程序设计的自然延伸</li><li>允许多个用户共享一台计算机<ul><li>用户只有输入和输出设备</li><li>分时系统为每个用户轮流分配等量的CPU时间</li><li>用户从发出指令得到得到即时结果的时间称为响应时间</li></ul></li><li>第一个分时系统CTSS由MIT于1962年开发出来</li></ul><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1>]]></content>
    
    
    
    <tags>
      
      <tag>System</tag>
      
      <tag>Linux</tag>
      
      <tag>408考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Instruction of Algorithm</title>
    <link href="/Algorithm/"/>
    <url>/Algorithm/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/AllAlgorithm.png" alt="《Instruction of Algorithm (Fourth Edition)》"></p><p><img src="/img/Algorithm2.png" alt="《算法导论》（第3版）"></p><div class="note note-warning">            <p>本文内容根据博主自身理解，同时结合《Instruction of Algorithm (4th Edition)》和《算法导论》（第三版）编写。</p><p>PS：借鉴了很多原书中的内容，因为写的太好了……</p>          </div><h2 id="Part-1-The-Role-of-Algorithms-in-Computing"><a href="#Part-1-The-Role-of-Algorithms-in-Computing" class="headerlink" title="Part 1 The Role of Algorithms in Computing"></a>Part 1 The Role of Algorithms in Computing</h2><h3 id="1-Algorithms"><a href="#1-Algorithms" class="headerlink" title="1. Algorithms"></a>1. Algorithms</h3><p><strong>算法</strong>：（非形式的说）就是定义任何良定义的计算过程，该过程取某个值或值的集合作为输入并产生某个值或值的集合作为输出。</p><p><code>Informally, an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.</code></p><p><strong>输入</strong></p><p><strong>输出</strong></p><h2 id="Part-2-Getting-Started"><a href="#Part-2-Getting-Started" class="headerlink" title="Part 2 Getting Started"></a>Part 2 Getting Started</h2><p><a href="https://polaris516.github.io/SortAlgorithm/">手撕排序算法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
